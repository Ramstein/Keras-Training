{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "DCNN for recognising digits .ipynb",
      "version": "0.3.2",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zb-BehaCgGPl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras import backend as K\n",
        "from keras.models import Sequential \n",
        "from keras.layers.convolutional import Conv2D, MaxPooling2D \n",
        "from keras.layers.core import Activation ,Flatten, Dense \n",
        "from keras.datasets import mnist \n",
        "from keras.utils import np_utils \n",
        "from keras.optimizers import SGD, RMSprop, Adam\n",
        "import numpy as np \n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rltu7G3zhQsb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1452
        },
        "outputId": "1c7e7538-b6a4-4b01-d2ee-5e2bbcb5259e"
      },
      "source": [
        "\n",
        "\n",
        "\n",
        "#define the ConvNet \n",
        "class LeNet:    \n",
        "  @staticmethod    \n",
        "  def build(input_shape, classes):        \n",
        "    model = Sequential()         \n",
        "    # CONV => RELU => POOL\n",
        "    model.add(Conv2D(20, kernel_size=5, padding=\"same\", input_shape=input_shape))\n",
        "    model.add(Activation(\"relu\")) \n",
        "    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2))) \n",
        "    # CONV => RELU => POOL \n",
        "    \n",
        "    model.add(Conv2D(50, kernel_size=5, border_mode=\"same\")) \n",
        "    model.add(Activation(\"relu\")) \n",
        "    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2))) \n",
        "    \n",
        "    # Flatten => RELU layers \n",
        "    model.add(Flatten()) \n",
        "    model.add(Dense(500)) \n",
        "    model.add(Activation(\"relu\")) \n",
        "    # a softmax classifier \n",
        "    model.add(Dense(classes)) \n",
        "    model.add(Activation(\"softmax\")) \n",
        "    return model\n",
        "  \n",
        "  \n",
        "  \n",
        "  \n",
        "# network and training \n",
        "NB_EPOCH = 20 \n",
        "BATCH_SIZE = 128 \n",
        "VERBOSE = 1 \n",
        "OPTIMIZER = Adam() \n",
        "VALIDATION_SPLIT=0.2 \n",
        "IMG_ROWS, IMG_COLS = 28, 28 # input image dimensions \n",
        "NB_CLASSES = 10 # number of outputs = number of digits \n",
        "INPUT_SHAPE = (1, IMG_ROWS, IMG_COLS) # data: shuffled and split between train and test sets \n",
        "(X_train, y_train), (X_test, y_test) = mnist.load_data()\n",
        "K.set_image_dim_ordering(\"th\") # consider them as float and normalize \n",
        "X_train = X_train.astype('float32') \n",
        "X_test = X_test.astype('float32') \n",
        "X_train /= 255 \n",
        "X_test /= 255 \n",
        "# we need a 60K x [1 x 28 x 28] shape as input to the CONVNET \n",
        "X_train = X_train[:, np.newaxis, :, :] \n",
        "X_test = X_test[:, np.newaxis, :, :] \n",
        "print(X_train.shape[0], 'train samples') \n",
        "print(X_test.shape[0], 'test samples') \n",
        "# convert class vectors to binary class matrices \n",
        "y_train = np_utils.to_categorical(y_train, NB_CLASSES) \n",
        "y_test = np_utils.to_categorical(y_test, NB_CLASSES) \n",
        "# initialize the optimizer and model \n",
        "model = LeNet.build(input_shape=INPUT_SHAPE, classes=NB_CLASSES) \n",
        "model.compile(loss=\"categorical_crossentropy\", optimizer=OPTIMIZER, metrics=[\"accuracy\"]) \n",
        "history = model.fit(X_train, y_train, batch_size=BATCH_SIZE, epochs=NB_EPOCH, verbose=VERBOSE, validation_split=VALIDATION_SPLIT) \n",
        "score = model.evaluate(X_test, y_test, verbose=VERBOSE) \n",
        "print(\"Test score:\", score[0]) \n",
        "print('Test accuracy:', score[1]) \n",
        "# list all data in history \n",
        "print(history.history.keys()) \n",
        "# summarize history for accuracy \n",
        "plt.plot(history.history['acc']) \n",
        "plt.plot(history.history['val_acc']) \n",
        "plt.title('model accuracy') \n",
        "plt.ylabel('accuracy') \n",
        "plt.xlabel('epoch') \n",
        "plt.legend(['train', 'test'], loc='upper left') \n",
        "plt.show() \n",
        "# summarize history for loss \n",
        "plt.plot(history.history['loss']) \n",
        "plt.plot(history.history['val_loss']) \n",
        "plt.title('model loss') \n",
        "plt.ylabel('loss') \n",
        "plt.xlabel('epoch') \n",
        "plt.legend(['train', 'test'], loc='upper left') \n",
        "plt.show() \n",
        "\n",
        "\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "60000 train samples\n",
            "10000 test samples\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:11: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(50, kernel_size=5, padding=\"same\")`\n",
            "  # This is added back by InteractiveShellApp.init_path()\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Train on 48000 samples, validate on 12000 samples\n",
            "Epoch 1/20\n",
            "48000/48000 [==============================] - 3s 61us/step - loss: 0.1872 - acc: 0.9418 - val_loss: 0.0706 - val_acc: 0.9787\n",
            "Epoch 2/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0495 - acc: 0.9847 - val_loss: 0.0459 - val_acc: 0.9871\n",
            "Epoch 3/20\n",
            "48000/48000 [==============================] - 3s 52us/step - loss: 0.0337 - acc: 0.9894 - val_loss: 0.0379 - val_acc: 0.9893\n",
            "Epoch 4/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0236 - acc: 0.9922 - val_loss: 0.0417 - val_acc: 0.9867\n",
            "Epoch 5/20\n",
            "48000/48000 [==============================] - 3s 52us/step - loss: 0.0189 - acc: 0.9940 - val_loss: 0.0342 - val_acc: 0.9899\n",
            "Epoch 6/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0123 - acc: 0.9959 - val_loss: 0.0384 - val_acc: 0.9874\n",
            "Epoch 7/20\n",
            "48000/48000 [==============================] - 3s 52us/step - loss: 0.0111 - acc: 0.9964 - val_loss: 0.0391 - val_acc: 0.9901\n",
            "Epoch 8/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0095 - acc: 0.9970 - val_loss: 0.0330 - val_acc: 0.9914\n",
            "Epoch 9/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0081 - acc: 0.9973 - val_loss: 0.0422 - val_acc: 0.9896\n",
            "Epoch 10/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0069 - acc: 0.9977 - val_loss: 0.0466 - val_acc: 0.9884\n",
            "Epoch 11/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0051 - acc: 0.9981 - val_loss: 0.0361 - val_acc: 0.9907\n",
            "Epoch 12/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0073 - acc: 0.9977 - val_loss: 0.0532 - val_acc: 0.9888\n",
            "Epoch 13/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0073 - acc: 0.9975 - val_loss: 0.0505 - val_acc: 0.9872\n",
            "Epoch 14/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0052 - acc: 0.9984 - val_loss: 0.0393 - val_acc: 0.9909\n",
            "Epoch 15/20\n",
            "48000/48000 [==============================] - 2s 52us/step - loss: 0.0039 - acc: 0.9988 - val_loss: 0.0354 - val_acc: 0.9918\n",
            "Epoch 16/20\n",
            "48000/48000 [==============================] - 3s 52us/step - loss: 0.0020 - acc: 0.9993 - val_loss: 0.0545 - val_acc: 0.9892\n",
            "Epoch 17/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0060 - acc: 0.9983 - val_loss: 0.0482 - val_acc: 0.9903\n",
            "Epoch 18/20\n",
            "48000/48000 [==============================] - 3s 52us/step - loss: 0.0056 - acc: 0.9981 - val_loss: 0.0351 - val_acc: 0.9920\n",
            "Epoch 19/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0020 - acc: 0.9995 - val_loss: 0.0407 - val_acc: 0.9914\n",
            "Epoch 20/20\n",
            "48000/48000 [==============================] - 3s 53us/step - loss: 0.0014 - acc: 0.9995 - val_loss: 0.0579 - val_acc: 0.9883\n",
            "10000/10000 [==============================] - 0s 47us/step\n",
            "Test score: 0.05274143260110131\n",
            "Test accuracy: 0.988\n",
            "dict_keys(['val_loss', 'val_acc', 'loss', 'acc'])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\ntCbhcNQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}